global
 daemon
 lua-load /usr/local/etc/haproxy/haproxy_mqtt.lua

defaults
 mode tcp
 timeout client 120s
 timeout server 120s
 timeout connect  5s
 option tcp-check
 option tcpka # For TCP keep-alive for both side client and server
 
 log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %Tw/%Tc/%Tt\ %B\ %ts\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq


# Listen to all MQTT requests (port 1883)
# not persistence connection by MQTT client ID
# using Haproxy can not auto reconnect for sub client when some node die
listen mqtt
  # MQTT binding to port 1883
  bind *:1883
  # communication mode (MQTT works on top of TCP)
  mode tcp
  tcp-request inspect-delay 5s
  option clitcpka # For TCP keep-alive
  option tcplog
  timeout client 3h #By default TCP keep-alive interval is 2hours in OS kernal, 'cat /proc/sys/net/ipv4/tcp_keepalive_time'
  timeout server 3h #By default TCP keep-alive interval is 2hours in OS kernal
  
  # must be open,or lua.get_mqtt_connect_field will throw error when running
  tcp-request content reject unless { req.payload(0,0),hex,lua.is_mqtt_connect,bool }
  #tcp-request content capture lua.get_mqtt_connect_field(clientid) len 50
  tcp-request content set-var(req.emq.clientid) lua.get_mqtt_connect_field(clientid)
  
  # balance mode (to choose which MQTT server to use)
  #balance leastconn
  server emq1 172.16.32.22:1883 check
  server emq2 172.16.32.68:1883 check
 

frontend f_mqtt
 #mode tcp
 bind *:21883
 tcp-request inspect-delay 5s


 # example 1: accept an incoming connection only if it contains a valid MQTT CONNECT message
 tcp-request content reject unless { req.payload(0,0),hex,lua.is_mqtt_connect,bool }

 # example 2: capture MQTT client ID for logging
 #tcp-request content capture lua.get_mqtt_connect_field(clientid) len 50

 # example 3: perform authentication on MQTT (you need to update the checkauth function)
 #tcp-request content lua.checkauth if { req.payload(0,0),hex,lua.is_mqtt_connect,bool }

 # example 4: MQTT connection routing based on the clientid field
 #use_backend b_mosquitto if { lua.get_mqtt_connect_field(clientid) -m beg mosqsub| }

 #tcp-request content set-var(req.emq.clientid) lua.get_mqtt_connect_field(clientid)
 #http-request set-header "x-emq-clientid"   %[var(req.emq.clientid)]

 
 default_backend b_mqtt

backend b_mqtt
 #mode tcp
 tcp-request inspect-delay 5s
 option tcp-check
 
 #tcp-request content accept if RDP_COOKIE
 #persist rdp-cookie
 #balance rdp-cookie
 
 balance roundrobin 
 #persistence connection by MQTT client ID, using this can not auto reconnect when some node die
 stick-table type string len 32 size 10k
 stick on lua.get_mqtt_connect_field(clientid)
 server emq1 172.16.32.22:1883 check
 server emq2 172.16.32.68:1883 check

backend b_mosquitto
 # example 5: perform persistence on MQTT client ID
 #stick-table type string len 32 size 10k
 #stick on lua.get_mqtt_connect_field(clientid)
 server emq2 172.16.32.68:1883 check
 
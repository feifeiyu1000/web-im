
#user  nobody;
worker_processes  4;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#njs
#load_module modules/ngx_http_js_module.so;
#load_module modules/ngx_stream_js_module.so;


events {
    worker_connections  65535;
}


stream {
    # Example configuration for TCP load balancing
    
    #using njs to get mqtt clientID
    #njs
    js_include mqtt-new.js;
    js_set     $mqtt_client_id setClientId;


    #log
    log_format mqtt '$remote_addr [$time_local] $protocol $status $bytes_received ' '$bytes_sent $upstream_addr $mqtt_client_id';

    upstream emq_backend {
        zone tcp_servers 64k;
        #hash $remote_addr;
		hash $mqtt_client_id consistent; # Session persistence keyed against ClientId
        server 172.16.32.22:1883 max_fails=2 fail_timeout=30s;
        server 172.16.32.68:1883 max_fails=2 fail_timeout=30s;
    }
    server {
        #emq
        listen       21883;
        tcp_nodelay on;
		preread_buffer_size 1k; # Big enough to read CONNECT packet header
		#已调通：注：njs-0.2.4版本后API变更，导致mqtt.js无法使用，启用后无法获取ClientId
		#通过升级为mqtt-new.js,可正常使用
		js_preread getClientId; # Parse CONNECT packet for ClientId

		#status_zone tcp_server;
        proxy_pass emq_backend;
        proxy_buffer_size 4k;
		proxy_connect_timeout 1s;
		proxy_protocol on;

		#log dir
		access_log	logs/mqtt_access.log mqtt;
		# Health check notifications
    	error_log	logs/mqtt_error.log;


    }
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;


    server {
        listen       80;
        server_name  localhost;

	
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
